- name: echo
  shell: "sleep 15"
  async: 45
  poll: 3
#- name: restart_site
#  shell: |
#    source /etc/profile
#    ps -ef | grep -v grep | grep test | grep sh | awk 'NR==1{printf("kill -9 %s\n"),$2}' | sh
#    nohup ./test > /dev/null 2>&1 &
#  args:
#    chdir: /usr/jexus
#- name: restart_site
#  shell: |
#    nohup ./jws restart > /dev/null 2>&1 &
#  args:
#    chdir: /usr/jexus
#- name: echo ABCdef
#  shell: echo "{{ string | lower }}"
#- name: get nginx_upstream_check_module
#  get_url:
#    url: https://codeload.github.com/yaoweibin/nginx_upstream_check_module/zip/master
#    dest: "{{ source_path }}"
#  register: nginx_upstream_check_module_name
#- name: get nginx-sticky-module-ng
#  get_url:
#    url: https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/get/master.tar.gz
#    dest: "{{ source_path }}"
#  register: nginx_sticky_module_ng_name
#- name: get nginx.tar.gz
#  get_url:
#    url: http://nginx.org/download/nginx-1.12.2.tar.gz
#    dest: "{{ source_path }}"
#  register: nginx_name
#- debug:
#    var: nginx_sticky_module_ng_name
#    verbosity: 2
#- debug:
#    var: nginx_upstream_check_module_name
#    verbosity: 2
#- debug:
#    var: nginx_name
#    verbosity: 2
#- debug:
#    msg: "{{ nginx_upstream_check_module_name.dest | basename | regex_replace('^(.*).zip$', '\\1') }}"
#    verbosity: 2
#- debug:
#    msg: "{{ nginx_sticky_module_ng_name.dest | basename | regex_replace('^(.*).tar.gz$', '\\1') }}"
#    verbosity: 2
#- debug:
#    msg: "{{ nginx_name.dest | basename | regex_replace('^(.*).tar.gz$', '\\1') }}"
#    verbosity: 2
#- name: unarchive nginx_upstream_check_module
#  unarchive:
#    src: "{{ source_path }}/{{ nginx_upstream_check_module_name.dest | basename }}"
#    dest: "{{ source_path }}"
#    copy: "no"
#- name: unarchive nginx_sticky_module_ng
#  unarchive:
#    src: "{{ source_path }}/{{ nginx_sticky_module_ng_name.dest | basename }}"
#    dest: "{{ source_path }}"
#    copy: "no"
#- name: unarchive nginx
#  unarchive:
#    src: "{{ source_path }}/{{ nginx_name.dest | basename }}"
#    dest: "{{ source_path }}"
#    copy: "no"
#- name: copy harbor package
#  copy: src={{ item }} dest={{ source_path }}
#  with_fileglob:
#  - main_program/*.tgz
#  register: harbor_program
#- debug:
#    var: harbor_program.results[0].item
#- set_fact: dest_var={{ harbor_program.results[0].item | basename }}
#- debug:
#    var: dest_var
#- unarchive: src={{ source_path }}/{{ harbor_program.results[0].item | basename }} dest={{ source_path }} copy=no
#- unarchive: src=/usr/local/src/test.tgz dest={{ source_path }} copy=no

#- name: delegate_to and run_once
#  shell: "echo \"aaa\" > /tmp/aaa.txt"
#  run_once: true
#  delegate_to: "{{ delegation_var }}"
#- name: register var
#  command: /usr/bin/ssh -V
#  register: var1
#- name: cat hosts
#  shell: "cat /etc/ansible/hosts"
##- debug: 
##    var: var1.stderr
#- name: register limits
#  command: ls /etc/security/limits.d
#  register: var2
##- debug:
##    var: var2.stdout_lines[0]
#- name: provides test
#  template: src="test.yml" dest="/tmp/"
#
#- name: create test dir
#  file:
#    path: /u06/test/aa/bb
#    state: directory
#    owner: etsuser
#    group: etsuser
#
#- name: register docker-ce status
#  shell: rpm -q docker-ce
#  register: docker_ce_IF
#  ignore_errors: True
#
#- debug:
#    var: FI
#
#- name: display yum-docker var
#  debug: var=docker_ce_IF
#  when: docker_ce_IF|succeeded and FI|int == 1
#  #when: docker_ce_IF|failed and FI == 1
#
#- name: "Display all cluster names"
#  debug: var=item
#  with_items: "{{domain_definition|json_query('domain.cluster[*].name')}}"
#- debug: var=Storage
#
#- name: "Display s1"
#  debug: var=item
#  with_items: "{{ Storage|json_query('dir.[*]') }}"
#
#- name: create Storage dir
#  file:
#    path: "{{ item.value }}"
#    state: directory
#    recurse: yes
#    owner: "etsuser"
#    group: "etsuser"
#  with_dict:
#    "{{ Storage.dir }}"
#
##- name: "Display s1"
##  debug: var=item
##  with_items: "{{ Storage_dir1|json_query('dir.[*]')|json_query('item.[*]') }}"
#
##- include: inner.yml
##  with_items:
##    - 1
##    - 2
##    - 3
##  loop_control:
##    loop_var: outer_item
